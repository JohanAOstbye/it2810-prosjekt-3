# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input ConnectionArgs {
  """Paginate after opaque cursor"""
  after: String

  """Paginate before opaque cursor"""
  before: String

  """Paginate first"""
  first: Float

  """Paginate last"""
  last: Float
}

type Mutation {
  addPokemon(data: UserAddPokemonInput!): User!
  createPokemon(Pokemon: PokemonInput!, Stats: [PokemonStatInput!]!): Pokemon!
  createStat(data: PokemonStatInput!): PokemonStat!
  deletePokemon(id: String!): Boolean!
  deleteUser(id: String!): Boolean!
  registerUser(data: UserInput!): User!
}

type PageData {
  count: Float!
  limit: Float!
  offset: Float!
}

"""The Pokemon model"""
type Pokemon {
  base_experience: Int!
  height: Int!
  id: ID!
  image: String!
  moves: [String!]!
  name: String!
  pokemonID: Int!
  stats: PokemonStat!
  types: [String!]!
  weight: Int!
}

type PokemonConnection {
  edges: [PokemonEdge!]
  pageInfo: PokemonPageInfo
}

type PokemonEdge {
  cursor: String
  node: Pokemon
}

input PokemonFilter {
  maxHeight: Int!
  maxPokemonId: Int!
  maxWeight: Int!
  minHeight: Int!
  minPokemonId: Int!
  minWeight: Int!
  name: String!
}

input PokemonInput {
  base_experience: Int!
  height: Int!
  image: String!
  moves: [String!]!
  name: String!
  pokemonID: Int!
  types: [String!]!
  weight: Int!
}

type PokemonPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PokemonResponse {
  page: PokemonConnection!
  pageData: PageData
}

"""The PokemonStat model"""
type PokemonStat {
  base_stat: Int!
  effort: Int!
  id: ID!
  name: String!
}

input PokemonStatInput {
  base_stat: Int!
  effort: Int!
  name: String!
}

type Query {
  login(data: UserLoginInput!): User!
  returnAllPokemon(data: ConnectionArgs!, filter: PokemonFilter!, orderby: String!): PokemonResponse!
  returnAllUsers(data: ConnectionArgs!): UserResponse!
  returnSinglePokemon(id: String!): Pokemon!
  returnSinglePokemonStat(id: String!): PokemonStat!
  returnSingleUser(id: String!): User!
}

"""The User model"""
type User {
  email: String!
  id: ID!
  pokedex(data: ConnectionArgs!, filter: PokemonFilter!, orderby: String!): [Pokemon!]!
  username: String!
}

input UserAddPokemonInput {
  pokemonID: String!
  userID: String!
}

type UserConnection {
  edges: [UserEdge!]
  pageInfo: UserPageInfo
}

type UserEdge {
  cursor: String
  node: User
}

input UserInput {
  email: String!
  password: String!
  username: String!
}

input UserLoginInput {
  password: String!
  username: String!
}

type UserPageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type UserResponse {
  page: UserConnection!
  pageData: PageData
}
